#+TITLE: An Introduction to Programming In Emacs Lisp
* DONE Preface
** Why
** On Reading This Text
** Who You are
** Lisp History
** Note For Novices
** Thank You
* DONE List Processing
** Lisp Lists
** Run a program
** Making Errors
** Names & Definitions
** Lisp Interpreter
** Evaluation
** Variables
** Arguments
** set & setq
** summary
** Error Message Excercises
* DONE Practicing Evaluation
** How to evaluate
** Buffer Names
** Getting Buffers
** Switching Buffers
** Buffer Size & Locatoins
** Evaluation Excercise
* DONE Writing Defuns
When tje Lisp Interpreter evaluates a list, it looks to see whether the 
first symbol on the list has a function defintion attached to it; or, put
another way, whether the symbol points to a function definition. If
it does, the computer carries out the instructions in the definition. A 
symbol that has a function defiintion is called, simply, a function
(although, properly speaking, the definition is the function and the symbol
refers to it.)

** Primitive Functions
** Defun
** Install 
** Interactive
** Interactive options
** Permanent Installation
** Let
** if
#+BEGIN_SRC emacs-lisp
(defun type-of-animal(characteristic)
"Print message in ECHO Area depending on characteristic.
if the characteristic is the symbol `fierce',
then warn of a tiger."
(if (equal characteristic 'fierce)
(message "it's a tiger")))
(type-of-animal 'fierce)
#+END_SRC
** else
#+BEGIN_SRC emacs-lisp
      (defun type-of-animal (characteristic)
      "print message in ECHO area depending on characteristic.
      If=>
      else=>
      "
      (if (equal characteristic 'fierce)
          (message "it's a tiger")
        (message "Otherwise")))
  (type-of-animal 'alamin)

  (if (> 4 5)                                   ;; if part
      (message "4 falsely greater than 5")      ;; then
    (mesage "4 is not greater than 5"))         ;; else part   
#+END_SRC
** Truth & Falsehood
There is an important aspect to the truth test in an 'if' expression.
So far, we have spoken of `true` and 'false' as values of predicates as if they were new kinds of Emacs Lisp objects. 
In fact, 'false' is just our old friend 'nil'. Anything else-anything at all-is 'true'.

The expression that tests for truth is interpreted as "true" if the result of evaluating it is a value that is not 'nil'. In other words,
the result of the test is considered true if the value returned is a number such as 47, a string such as '"hello"', or a symbol (other than
'nil') such as 'flowers', or a list (so long as it is not empty), or even a buffer!
*** nil explained
#+BEGIN_SRC emacs-lisp
(if 4
'true
'false)

(if nil
'true
'false)

(> 5 4)
(> 4 5)
#+END_SRC
** save-excursion
** Review
** Defun excercise
* TODO Buffer Walk through
* More Complex
* Narrowing & Widening
* car cdr & cons
* Cutting & Storing Text
* List Implementation
* Yanking
* Loops and Recursion
* Regexp Search
* Counting Words
* Words in a defun
* Readying a Graph
* Emacs Initialization
* Debugging
* Conclusion
* the-the
* Kill Ring
* Full Graph
* Free Software and Free Manuals
* GNU Free Documentation License
* Index 
* About the Author

